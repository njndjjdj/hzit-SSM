<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zyc.mapper.StudentsMapper">
  <resultMap id="BaseResultMap" type="com.zyc.entity.po.Students">
    <id column="student_id" jdbcType="INTEGER" property="studentId" />
    <result column="student_name" jdbcType="VARCHAR" property="studentName" />
    <result column="student_age" jdbcType="INTEGER" property="studentAge" />
    <result column="sex" jdbcType="CHAR" property="sex" />
    <result column="cid" jdbcType="INTEGER" property="cid" />
    <result column="addr" jdbcType="VARCHAR" property="addr" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    student_id, student_name, student_age, sex, cid, addr
  </sql>
  <select id="selectByExample" parameterType="com.zyc.entity.query.StudentsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from students
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from students
    where student_id = #{studentId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from students
    where student_id = #{studentId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zyc.entity.query.StudentsExample">
    delete from students
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zyc.entity.po.Students">
    insert into students (student_id, student_name, student_age, 
      sex, cid, addr)
    values (#{studentId,jdbcType=INTEGER}, #{studentName,jdbcType=VARCHAR}, #{studentAge,jdbcType=INTEGER}, 
      #{sex,jdbcType=CHAR}, #{cid,jdbcType=INTEGER}, #{addr,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.zyc.entity.po.Students">
    insert into students
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentId != null">
        student_id,
      </if>
      <if test="studentName != null">
        student_name,
      </if>
      <if test="studentAge != null">
        student_age,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="cid != null">
        cid,
      </if>
      <if test="addr != null">
        addr,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentId != null">
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="studentName != null">
        #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentAge != null">
        #{studentAge,jdbcType=INTEGER},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=CHAR},
      </if>
      <if test="cid != null">
        #{cid,jdbcType=INTEGER},
      </if>
      <if test="addr != null">
        #{addr,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zyc.entity.query.StudentsExample" resultType="java.lang.Long">
    select count(*) from students
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="findAllStudent" resultType="com.zyc.entity.po.Students">
    select * from students
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update students
    <set>
      <if test="row.studentId != null">
        student_id = #{row.studentId,jdbcType=INTEGER},
      </if>
      <if test="row.studentName != null">
        student_name = #{row.studentName,jdbcType=VARCHAR},
      </if>
      <if test="row.studentAge != null">
        student_age = #{row.studentAge,jdbcType=INTEGER},
      </if>
      <if test="row.sex != null">
        sex = #{row.sex,jdbcType=CHAR},
      </if>
      <if test="row.cid != null">
        cid = #{row.cid,jdbcType=INTEGER},
      </if>
      <if test="row.addr != null">
        addr = #{row.addr,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update students
    set student_id = #{row.studentId,jdbcType=INTEGER},
      student_name = #{row.studentName,jdbcType=VARCHAR},
      student_age = #{row.studentAge,jdbcType=INTEGER},
      sex = #{row.sex,jdbcType=CHAR},
      cid = #{row.cid,jdbcType=INTEGER},
      addr = #{row.addr,jdbcType=VARCHAR}
    <if test="example != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zyc.entity.po.Students">
    update students
    <set>
      <if test="studentName != null">
        student_name = #{studentName,jdbcType=VARCHAR},
      </if>
      <if test="studentAge != null">
        student_age = #{studentAge,jdbcType=INTEGER},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=CHAR},
      </if>
      <if test="cid != null">
        cid = #{cid,jdbcType=INTEGER},
      </if>
      <if test="addr != null">
        addr = #{addr,jdbcType=VARCHAR},
      </if>
    </set>
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zyc.entity.po.Students">
    update students
    set student_name = #{studentName,jdbcType=VARCHAR},
      student_age = #{studentAge,jdbcType=INTEGER},
      sex = #{sex,jdbcType=CHAR},
      cid = #{cid,jdbcType=INTEGER},
      addr = #{addr,jdbcType=VARCHAR}
    where student_id = #{studentId,jdbcType=INTEGER}
  </update>
</mapper>